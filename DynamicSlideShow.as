package  {		import flash.display.MovieClip;    import flash.display.Sprite;	import flash.display.StageScaleMode;	import flash.net.URLRequest;		import flash.display.Loader;	import flash.events.Event;	import flash.events.TimerEvent;	import flash.net.URLLoader;	import flash.utils.Timer;		import gs.TweenLite;	import gs.TweenMax;	import classes.Gallery;	import classes.Samples;	import classes.Slides;	import flash.display.Stage;	import flash.events.MouseEvent;	import flash.ui.Keyboard;	import flash.events.KeyboardEvent;			public class DynamicSlideShow extends MovieClip {				//Global Variables		public static var THUMBVIEW_X:Number = 0;		public static var THUMBVIEW_Y:Number = 0;				public static var CURRENTGALLERY:Number = -1;		public static var CURRENTSAMPLE:Number = 0;		public static var CURRENTSLIDE:Number = 0;		public static var SLIDE_X:Number = 125;		public static var SLIDE_Y:Number = 284;				public static var _STAGE:Object = Stage;			public static var IDLETIME_HOME:Number = 1000;		public static var IDLETIME_GALLERY:Number = 500;		public static var DELAYTIME:Number = 200;		public static var TWEENTIME:Number = 1;				//private variables		private var _galleryList:XMLList;		private var _galleryArray:Array;		private var _totalGalleries:Number;				//xml data loader		private var _loader:Loader;		private var _request:URLRequest;				private var _swfLoader:Loader;				//timer		private var _timer:Timer;		private var _slideTimer:Timer;				//private var _idleTime:Number = 20000;//		private var _delayTime:Number = 5000;//		private var _tweenTime:Number = 1;				private var _auto:Boolean = false				//visuals		private var _tabViewWidth:Number = 1300;						public function DynamicSlideShow() {			// constructor code			stage.scaleMode = StageScaleMode.NO_SCALE;						Slides._loader = new Loader();						//if(this._delayTime < 1000)//			{//				this._delayTime = 1000;//			}						if(TWEENTIME < 0.1)			{				TWEENTIME = 0.1;			}						if(TWEENTIME > (IDLETIME_GALLERY/10000))			{				TWEENTIME = (IDLETIME_GALLERY/10000);			}						//load xml file			var slidesfile:URLRequest = new URLRequest("data.xml");			var ulLoader:URLLoader = new URLLoader();			ulLoader.load(slidesfile);			ulLoader.addEventListener(Event.COMPLETE, xmlLoaded);						//set up timers			this._timer = new Timer(IDLETIME_HOME,1);			this._timer.start();			this._timer.addEventListener(TimerEvent.TIMER, autoSlideshow);						this._slideTimer = new Timer(DELAYTIME);		    this._slideTimer.addEventListener(TimerEvent.TIMER, LoadNewSlide);						//Mouse and Keyboard listeners, stops the timer when a event occurs			stage.addEventListener(MouseEvent.MOUSE_MOVE, stopTimer);			stage.addEventListener(MouseEvent.MOUSE_DOWN, stopTimer);			stage.addEventListener(MouseEvent.MOUSE_UP, stopTimer);						stage.addEventListener(KeyboardEvent.KEY_DOWN, stopTimerK);			stage.addEventListener(KeyboardEvent.KEY_UP, stopTimerK);						home.addEventListener(MouseEvent.CLICK, homeOnClick);			home.addEventListener(MouseEvent.MOUSE_OVER, homeOnOver);						this.gotoAndStop(1);			home.gotoAndStop(2);						_swfLoader = new Loader();			_swfLoader.name = "swfLoader";			addChildAt(_swfLoader,2);			_swfLoader.x=0;			_swfLoader.y=242;			_swfLoader.load(new URLRequest("dat/IRS_banner.swf"));								}		private function homeOnOver(e:MouseEvent):void		{			if(home.currentFrame == 1)			{				home.gotoAndStop("3");			    home.addEventListener(MouseEvent.MOUSE_OUT, homeOnOut);			}		}				private function homeOnOut(e:MouseEvent):void		{				home.gotoAndStop("1");		}						private function homeOnClick(e:MouseEvent):void		{			home.removeEventListener(MouseEvent.MOUSE_OUT, homeOnOut);			home.gotoAndStop(2);			this.gotoAndStop(1);						if(!(this.getChildByName("swfLoader")))			{				//trace("?");				addChildAt(_swfLoader,2);				_swfLoader.load(new URLRequest("dat/IRS_banner.swf"));			}						for(var i:Number=0;i<this.tabView.numChildren;i++)			{				var tab:Gallery = Gallery(this.tabView.getChildAt(i));				tab.gotoAndStop(2);											if(tab._samples!=null)				{					//trace(tab._samples);					this.removeChild(tab._samples);										tab._samples = null;				}			}											}				private function xmlLoaded(e:Event):void		{			var ldr:URLLoader = e.target as URLLoader;			ldr.removeEventListener(Event.COMPLETE, xmlLoaded);						var xml:XML = new XML(e.target.data);			this._galleryList = xml.gallery;						buildGallery(_galleryList);		}				private function buildGallery(list:XMLList):void		{			this._totalGalleries = list.length();			this._galleryArray = new Array();						var tabWidth:Number = this._tabViewWidth/_totalGalleries;			var tabPos:Number = 1;			var _gallery:XML;						for each(_gallery in list)			{				var tab = new Gallery(_gallery, tabPos, tabWidth);				tabView.addChildAt(tab,_gallery.childIndex());				this._galleryArray.push(tab);				tabPos+=tabWidth+1;				}						Slides._loader.contentLoaderInfo.addEventListener(Event.COMPLETE, slideLoaded);					}				private function slideLoaded(e:Event):void		{			//slide fade in			Slides._loader.x = 500-Slides._loader.width/2;			Slides._loader.alpha = 1;			TweenMax.from(Slides._loader, 1, {alpha:0, overwrite:3});						//this.scrollPane.source =Slides._loader; 							//to next slide				DynamicSlideShow.CURRENTSLIDE++;								//to next sample if necessary				if(DynamicSlideShow.CURRENTSLIDE >= this._galleryArray[DynamicSlideShow.CURRENTGALLERY]._samples.samplesArray[DynamicSlideShow.CURRENTSAMPLE]._slides._totalSlides)				{					DynamicSlideShow.CURRENTSAMPLE ++;						DynamicSlideShow.CURRENTSLIDE = 0;										if(DynamicSlideShow.CURRENTSAMPLE >=this._galleryArray[DynamicSlideShow.CURRENTGALLERY]._samples._totalSamples)					{						DynamicSlideShow.CURRENTGALLERY ++;						DynamicSlideShow.CURRENTSAMPLE =0						if(DynamicSlideShow.CURRENTGALLERY >= this._totalGalleries)						{							DynamicSlideShow.CURRENTGALLERY =0;													}					}							}								if(this._auto)				{					//if in auto slide mode, start slideTimer					this._slideTimer.start();				}		}				private function LoadNewSlide(e:TimerEvent):void		{			this._slideTimer.stop();									if(this.currentFrame==1)			{				home.gotoAndStop(1);			    this.gotoAndStop(2);				if(this.getChildByName("swfLoader"))				{					this.removeChild(this.getChildByName("swfLoader"));				}								DynamicSlideShow.CURRENTGALLERY=0;				//this._galleryArray[DynamicSlideShow.CURRENTGALLERY].loadSamples();						}						if(!(this._galleryArray[DynamicSlideShow.CURRENTGALLERY]._samples))			{				this._galleryArray[DynamicSlideShow.CURRENTGALLERY].loadSamples();			}			else			{				if(this._galleryArray[DynamicSlideShow.CURRENTGALLERY]._samples.samplesArray[DynamicSlideShow.CURRENTSAMPLE]._slides)				{					this._galleryArray[DynamicSlideShow.CURRENTGALLERY]._samples.samplesArray[DynamicSlideShow.CURRENTSAMPLE]._slides.loadNewSlide();				}				else				{					this._galleryArray[DynamicSlideShow.CURRENTGALLERY]._samples.samplesArray[DynamicSlideShow.CURRENTSAMPLE].loadSlides();				}			}		}								private function autoSlideshow(e:TimerEvent):void{			trace("auto slide starts!");			this._auto = true;/*			if((this._auto)&&(this.currentFrame == 2))			{				//to next slide				DynamicSlideShow.CURRENTSLIDE++;								//to next sample if necessary				if(DynamicSlideShow.CURRENTSLIDE >= this._galleryArray[DynamicSlideShow.CURRENTGALLERY]._samples.samplesArray[DynamicSlideShow.CURRENTSAMPLE]._slides._totalSlides)				{					DynamicSlideShow.CURRENTSAMPLE ++;						DynamicSlideShow.CURRENTSLIDE = 0;										if(DynamicSlideShow.CURRENTSAMPLE >=this._galleryArray[DynamicSlideShow.CURRENTGALLERY]._samples._totalSamples)					{						DynamicSlideShow.CURRENTGALLERY ++;						DynamicSlideShow.CURRENTSAMPLE =0						if(DynamicSlideShow.CURRENTGALLERY >= this._totalGalleries)						{							DynamicSlideShow.CURRENTGALLERY =0;						}					}							}								//if in auto slide mode, start slideTimer				this._slideTimer.start();			}else			{*/				this._slideTimer.start();			//}		}						private function stopTimer(e:MouseEvent):void{			if(this._auto)			{				this._auto = false;			}            			this._timer.stop();			if(this.currentFrame == 1)			{				this._timer.delay = IDLETIME_HOME;				this._timer.start();			}else{				this._timer.delay = IDLETIME_GALLERY;				this._timer.start();			}						this._slideTimer.stop();					}				private function stopTimerK(e:KeyboardEvent):void{			if(this._auto)			{				this._auto = false;			}						this._timer.stop();			this._timer.start();			this._slideTimer.stop();		}					}}